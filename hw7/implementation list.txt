implementation list:

expr ::=  integer literal                       # of the form 123 or -456
          boolean literal                       # true , false
          string literal                        # of the form "xyz"
          id                                    # starts with a letter or _
          expr + expr                           # adds integers / concatenates arrays / concatenates strings
          expr * expr
          expr - expr
          expr == expr                          # equality (all types)
          expr > expr                           # for integers and strings (lexicographic order)
          expr >= expr                          # for integers and strings (lexicographic order)
          expr < expr                           # for integers and strings (lexicographic order)
          expr <= expr                          # for integers and strings (lexicographic order)
          expr <> expr                          # this is "not equal" (all types)
          expr and expr                         # short-circuiting
          expr or expr                          # short-circuiting
          not expr
          let ( id = expr , ... ) expr          # local binding
          expr ? expr : expr                    # conditional
          expr ( expr , ... )                   # function call
          ( expr )
          [ expr , ... ]                        # creates an array
          fun ( id , ... ) body                 # anonymous function
          fun id ( id , ... ) body              # recursive anonymous function
          { id : expr , ... }                   # dictionary (record)
          expr [ expr ]                         # array or string (a[2]) or dictionary (a["x"]) indexing



stmt ::= expr ;                               #DONE
        id = expr ;                           #DONE
        print expr , ... ;                    # print values (on the same line)
        expr [ expr ] = expr ;                #DONE
        if ( expr ) body                      #DONE
        if ( expr ) body else body            #DONE
        while ( expr ) body                   #DONE
        for ( id in expr ) body               # iteration over elements of an array

body ::= { decl ... stmt ... }                #DONE
