implementation list:

expr ::=  integer literal                       #DONE
          boolean literal                       #DONE
          string literal                        #DONE
          id                                    #DONE
          expr + expr                           #DONE
          expr * expr                           #DONE
          expr - expr                           #DONE
          expr == expr                          #DONE
          expr > expr                           #DONE
          expr >= expr                          #DONE
          expr < expr                           #DONE
          expr <= expr                          #DONE
          expr <> expr                          #DONE
          expr and expr                         #DONE
          expr or expr                          #DONE
          not expr                              #DONE
          let ( id = expr , ... ) expr          # local binding
          expr ? expr : expr                    #DONE
          expr ( expr , ... )                   #DONE
          ( expr )
          [ expr , ... ]                        #DONE
          fun ( id , ... ) body                 #DONE
          fun id ( id , ... ) body              #DONE
          { id : expr , ... }                   # dictionary (record)
          expr [ expr ]                         #DONE



stmt ::= expr ;                               #DONE
        id = expr ;                           #DONE
        print expr , ... ;                    # print values (on the same line)
        expr [ expr ] = expr ;                #DONE
        if ( expr ) body                      #DONE
        if ( expr ) body else body            #DONE
        while ( expr ) body                   #DONE
        for ( id in expr ) body               # iteration over elements of an array

body ::= { decl ... stmt ... }                #DONE
