{var count = 10; while (not (zero? count)) {count <- (- count 1); print count;}}

{var res = 0; for (var count = 0;) (> count 10); (+ count 1); {res <- (- res 1);}}

{for var count = 0; (> count 10); (+ count 1); {print count;}}

{var x = "hello    world"; print x;}
{var x = "#"hello"; print x;}

{var x = "#""; print x;}

{var add = (function (y) (+ y y)); print (add 1);}
{var add = (function (y) (+ y y));}

{procedure hello (a,b,c) {print 1;}; hello (1,2,3);}



Also make sure that you cannot call a procedure from an expression context, that is, if foo is a procedure, the following should cause an error: (+ (foo 10) 30).
^
procedures don't return anything, so you wouldn't be passing anything into this function call. That's why this call breaks.

(Calling a function from a statement context should not cause a problem (why?), so that if bar is a function, then having a statement bar(1,2,3); can either report an error or not, which is up to you.)
^
This is fine though. Although functions don't "do anything" in terms of updating ref cells, they do return values. When you evaluate a function in a statement context, you just drop the return value and don't do anything with it. So while it's not useful, but it's not really an error either.




{procedure hello (a,b,c) {print 1;};}

{var add = (function (y) (+ 1 y)); var array = (new-array 2); array[1] <- 3; array[0] <- 1; print (with array (map add));}

{var array = (new-array 4); array[0] <- 2; print (with array (length));}


length (returns the length of a string)
{var s1 = "hello"; {print (length s1);}}
Expect 5

substring (returns part of a string as a new string)
{var s1 = "substring"; {print (substring s1 0 3);}}
Expect sub

concat (concatenate two strings into a new one)
{var s1 = "con"; {var s2 = "cat"; print (concat s1 s2);}}
Expect concat

startswith (check if a string starts with another string)
{var s1 = "substring"; {var s2 = "sub"; {print (startswith? s1 s2);}}}
Expect True

endswith (check if a string ends with another string)
{var s1 = "substring"; {var s2 = "sub"; {print (endswith? s1 s2);}}}
Expect False

lower (converts every character of a string into lowercase, returning a new string)
{var s1 = "HELLO"; {print (lower s1);}}
Expect hello

upper (converts every character of a string into uppercase, returning a new string).
{var s1 = "hello"; {print (upper s1);}}
Expect HELLO
