{procedure quicksort (array,l,h) {
  var stack = (new-array (- (+ h 1) l));
  var top = 0;
  var partition = 0;

  print "got unsorted array";
  print array;
  print "----";

  stack[top] <- l;
  top <- (+ top 1);
  stack[top] <- h;

  while (>= top 0) {
    var i = 0;
    var x = 0;
    var j = 0;

    h <- (with stack (index top));
    top <- (- top 1);
    l <- (with stack (index top));
    top <- (- top 1);

    i <- (- l 1);
    x <- (with array (index h));
    j <- l;

    while (<= j (- h 1)) {
      if (<= (with array (index j)) x) {
        i <- (+ i 1);
        array <- (swap array i j);
      };
      j <- (+ j 1);
    };

    partition <- (+ i 1);
    array <- (swap array h partition);

    if (> (- partition 1) l) {
      top <- (+ top 1);
      stack[top] <- l;
      top <- (+ top 1);
      stack[top] <- (- partition 1);
    };

    if (< (+ partition 1) h) {
      top <- (+ top 1);
      stack[top] <- (+ partition 1);
      top <- (+ top 1);
      stack[top] <- h;
    };
  };

  print "sorted array";
  print array;
};

var to_sort = (new-array 5);
to_sort[0] <- 4;
to_sort[1] <- 2;
to_sort[2] <- 1;
to_sort[3] <- 1;
to_sort[4] <- 3;

quicksort (to_sort, 0, 4);
print "done";
}
